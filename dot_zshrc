# Setup GPG Pinentry
export GPG_TTY=$(tty)
# Path for oh-my-zsh
export ZSH="$HOME/.oh-my-zsh"

ZSH_THEME="robbyrussell"

CASE_SENSITIVE="true"

zstyle ':omz:update' mode auto      # update automatically without asking
zstyle ':completion:*:*:docker:*' option-stacking yes
zstyle ':completion:*:*:docker-*:*' option-stacking yes
zstyle ':omz:update' frequency 15

HIST_STAMPS="dd/mm/yyyy"

plugins=(git zoxide zsh-syntax-highlighting zsh-autosuggestions eza docker fzf)
ZOXIDE_CMD_OVERRIDE=cd
source $ZSH/oh-my-zsh.sh

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
   export EDITOR='nano'
else
  export EDITOR='nvim'
fi

# history setup
HISTFILE=$HOME/.zhistory
SAVEHIST=5000
HISTSIZE=1000
setopt share_history
setopt hist_expire_dups_first
setopt hist_ignore_dups
setopt hist_verify

# completion using arrow keys (based on history)
bindkey '^[[A' history-search-backward
bindkey '^[[B' history-search-forward

alias ls='eza --color=always --no-filesize --icons=always --no-user --no-permissions'

alias brew='env PATH="${PATH//$(pyenv root)\/shims:/}" brew'
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init - zsh)"

alias gcc='gcc-14'
alias g++='g++-14'

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

export PATH="$HOME/.docker/bin:$PATH"

# Custom Functions

# Custom Functions to create a new linux container (Made by @inesiscosta)
function new_linux() {
  # Check if Docker is running
  if ! docker info > /dev/null 2>&1; then
    open -a Docker
    # Wait until Docker is running
    while ! docker info > /dev/null 2>&1; do
      sleep 1
    done
  fi
  docker run -it -v $PWD:/dir -w /dir --name "$1" linux:1.0
  osascript -e 'quit app "Docker Desktop"'
}

# Function to launch a docker container with a name that was created before and open it in the pwd (Made by @inesiscosta)
function linux() {
  container_name="$1"
  # Check if Docker is running
  if ! docker info > /dev/null 2>&1; then
    open -a Docker
    # Wait until Docker is running
    while ! docker info > /dev/null 2>&1; do
      sleep 1
    done
  fi
  # Check if the container is running
  if docker ps --format '{{.Names}}' | grep -q "^$container_name$"; then
    # Container is running, exec into it
    docker exec -it "$container_name" /bin/bash
  else
    # Container is not running, try to start it
    if docker ps -a --format '{{.Names}}' | grep -q "^$container_name$"; then
      # Container exists but is stopped, start it
      docker start -i "$container_name"
    else
      # Container does not exist, print error
      echo "Container '$container_name' does not exist."
    fi
  fi
  osascript -e 'quit app "Docker Desktop"'
}

# Start tmux if not already running
if command -v tmux &> /dev/null && [ -z "$TMUX" ]; then
  tmux attach-session -t default || tmux new-session -s default
fi
